{
  "version": 3,
  "sources": ["../three/examples/jsm/controls/TransformControls.js"],
  "sourcesContent": ["import {\n\tBoxGeometry,\n\tBufferGeometry,\n\tCylinderGeometry,\n\tDoubleSide,\n\tEuler,\n\tFloat32BufferAttribute,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOctahedronGeometry,\n\tPlaneGeometry,\n\tQuaternion,\n\tRaycaster,\n\tSphereGeometry,\n\tTorusGeometry,\n\tVector3\n} from 'three';\n\nconst _raycaster = new Raycaster();\n\nconst _tempVector = new Vector3();\nconst _tempVector2 = new Vector3();\nconst _tempQuaternion = new Quaternion();\nconst _unit = {\n\tX: new Vector3( 1, 0, 0 ),\n\tY: new Vector3( 0, 1, 0 ),\n\tZ: new Vector3( 0, 0, 1 )\n};\n\nconst _changeEvent = { type: 'change' };\nconst _mouseDownEvent = { type: 'mouseDown' };\nconst _mouseUpEvent = { type: 'mouseUp', mode: null };\nconst _objectChangeEvent = { type: 'objectChange' };\n\nclass TransformControls extends Object3D {\n\n\tconstructor( camera, domElement ) {\n\n\t\tsuper();\n\n\t\tif ( domElement === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.TransformControls: The second parameter \"domElement\" is now mandatory.' );\n\t\t\tdomElement = document;\n\n\t\t}\n\n\t\tthis.isTransformControls = true;\n\n\t\tthis.visible = false;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\tconst _gizmo = new TransformControlsGizmo();\n\t\tthis._gizmo = _gizmo;\n\t\tthis.add( _gizmo );\n\n\t\tconst _plane = new TransformControlsPlane();\n\t\tthis._plane = _plane;\n\t\tthis.add( _plane );\n\n\t\tconst scope = this;\n\n\t\t// Defined getter, setter and store for a property\n\t\tfunction defineProperty( propName, defaultValue ) {\n\n\t\t\tlet propValue = defaultValue;\n\n\t\t\tObject.defineProperty( scope, propName, {\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn propValue !== undefined ? propValue : defaultValue;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tif ( propValue !== value ) {\n\n\t\t\t\t\t\tpropValue = value;\n\t\t\t\t\t\t_plane[ propName ] = value;\n\t\t\t\t\t\t_gizmo[ propName ] = value;\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: propName + '-changed', value: value } );\n\t\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tscope[ propName ] = defaultValue;\n\t\t\t_plane[ propName ] = defaultValue;\n\t\t\t_gizmo[ propName ] = defaultValue;\n\n\t\t}\n\n\t\t// Define properties with getters/setter\n\t\t// Setting the defined property will automatically trigger change event\n\t\t// Defined properties are passed down to gizmo and plane\n\n\t\tdefineProperty( 'camera', camera );\n\t\tdefineProperty( 'object', undefined );\n\t\tdefineProperty( 'enabled', true );\n\t\tdefineProperty( 'axis', null );\n\t\tdefineProperty( 'mode', 'translate' );\n\t\tdefineProperty( 'translationSnap', null );\n\t\tdefineProperty( 'rotationSnap', null );\n\t\tdefineProperty( 'scaleSnap', null );\n\t\tdefineProperty( 'space', 'world' );\n\t\tdefineProperty( 'size', 1 );\n\t\tdefineProperty( 'dragging', false );\n\t\tdefineProperty( 'showX', true );\n\t\tdefineProperty( 'showY', true );\n\t\tdefineProperty( 'showZ', true );\n\n\t\t// Reusable utility variables\n\n\t\tconst worldPosition = new Vector3();\n\t\tconst worldPositionStart = new Vector3();\n\t\tconst worldQuaternion = new Quaternion();\n\t\tconst worldQuaternionStart = new Quaternion();\n\t\tconst cameraPosition = new Vector3();\n\t\tconst cameraQuaternion = new Quaternion();\n\t\tconst pointStart = new Vector3();\n\t\tconst pointEnd = new Vector3();\n\t\tconst rotationAxis = new Vector3();\n\t\tconst rotationAngle = 0;\n\t\tconst eye = new Vector3();\n\n\t\t// TODO: remove properties unused in plane and gizmo\n\n\t\tdefineProperty( 'worldPosition', worldPosition );\n\t\tdefineProperty( 'worldPositionStart', worldPositionStart );\n\t\tdefineProperty( 'worldQuaternion', worldQuaternion );\n\t\tdefineProperty( 'worldQuaternionStart', worldQuaternionStart );\n\t\tdefineProperty( 'cameraPosition', cameraPosition );\n\t\tdefineProperty( 'cameraQuaternion', cameraQuaternion );\n\t\tdefineProperty( 'pointStart', pointStart );\n\t\tdefineProperty( 'pointEnd', pointEnd );\n\t\tdefineProperty( 'rotationAxis', rotationAxis );\n\t\tdefineProperty( 'rotationAngle', rotationAngle );\n\t\tdefineProperty( 'eye', eye );\n\n\t\tthis._offset = new Vector3();\n\t\tthis._startNorm = new Vector3();\n\t\tthis._endNorm = new Vector3();\n\t\tthis._cameraScale = new Vector3();\n\n\t\tthis._parentPosition = new Vector3();\n\t\tthis._parentQuaternion = new Quaternion();\n\t\tthis._parentQuaternionInv = new Quaternion();\n\t\tthis._parentScale = new Vector3();\n\n\t\tthis._worldScaleStart = new Vector3();\n\t\tthis._worldQuaternionInv = new Quaternion();\n\t\tthis._worldScale = new Vector3();\n\n\t\tthis._positionStart = new Vector3();\n\t\tthis._quaternionStart = new Quaternion();\n\t\tthis._scaleStart = new Vector3();\n\n\t\tthis._getPointer = getPointer.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerHover = onPointerHover.bind( this );\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t}\n\n\t// updateMatrixWorld  updates key transformation variables\n\tupdateMatrixWorld() {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\tif ( this.object.parent === null ) {\n\n\t\t\t\tconsole.error( 'TransformControls: The attached 3D object must be a part of the scene graph.' );\n\n\t\t\t} else {\n\n\t\t\t\tthis.object.parent.matrixWorld.decompose( this._parentPosition, this._parentQuaternion, this._parentScale );\n\n\t\t\t}\n\n\t\t\tthis.object.matrixWorld.decompose( this.worldPosition, this.worldQuaternion, this._worldScale );\n\n\t\t\tthis._parentQuaternionInv.copy( this._parentQuaternion ).invert();\n\t\t\tthis._worldQuaternionInv.copy( this.worldQuaternion ).invert();\n\n\t\t}\n\n\t\tthis.camera.updateMatrixWorld();\n\t\tthis.camera.matrixWorld.decompose( this.cameraPosition, this.cameraQuaternion, this._cameraScale );\n\n\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\tthis.camera.getWorldDirection( this.eye );\n\n\t\t} else {\n\n\t\t\tthis.eye.copy( this.cameraPosition ).sub( this.worldPosition ).normalize();\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( this );\n\n\t}\n\n\tpointerHover( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst intersect = intersectObjectWithRay( this._gizmo.picker[ this.mode ], _raycaster );\n\n\t\tif ( intersect ) {\n\n\t\t\tthis.axis = intersect.object.name;\n\n\t\t} else {\n\n\t\t\tthis.axis = null;\n\n\t\t}\n\n\t}\n\n\tpointerDown( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true || pointer.button !== 0 ) return;\n\n\t\tif ( this.axis !== null ) {\n\n\t\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\t\tif ( planeIntersect ) {\n\n\t\t\t\tthis.object.updateMatrixWorld();\n\t\t\t\tthis.object.parent.updateMatrixWorld();\n\n\t\t\t\tthis._positionStart.copy( this.object.position );\n\t\t\t\tthis._quaternionStart.copy( this.object.quaternion );\n\t\t\t\tthis._scaleStart.copy( this.object.scale );\n\n\t\t\t\tthis.object.matrixWorld.decompose( this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart );\n\n\t\t\t\tthis.pointStart.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\t\t\t_mouseDownEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseDownEvent );\n\n\t\t}\n\n\t}\n\n\tpointerMove( pointer ) {\n\n\t\tconst axis = this.axis;\n\t\tconst mode = this.mode;\n\t\tconst object = this.object;\n\t\tlet space = this.space;\n\n\t\tif ( mode === 'scale' ) {\n\n\t\t\tspace = 'local';\n\n\t\t} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {\n\n\t\t\tspace = 'world';\n\n\t\t}\n\n\t\tif ( object === undefined || axis === null || this.dragging === false || pointer.button !== - 1 ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\tif ( ! planeIntersect ) return;\n\n\t\tthis.pointEnd.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\tif ( mode === 'translate' ) {\n\n\t\t\t// Apply translate\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t}\n\n\t\t\tif ( axis.indexOf( 'X' ) === - 1 ) this._offset.x = 0;\n\t\t\tif ( axis.indexOf( 'Y' ) === - 1 ) this._offset.y = 0;\n\t\t\tif ( axis.indexOf( 'Z' ) === - 1 ) this._offset.z = 0;\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._quaternionStart ).divide( this._parentScale );\n\n\t\t\t} else {\n\n\t\t\t\tthis._offset.applyQuaternion( this._parentQuaternionInv ).divide( this._parentScale );\n\n\t\t\t}\n\n\t\t\tobject.position.copy( this._offset ).add( this._positionStart );\n\n\t\t\t// Apply translation snap\n\n\t\t\tif ( this.translationSnap ) {\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\tobject.position.applyQuaternion( _tempQuaternion.copy( this._quaternionStart ).invert() );\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.position.applyQuaternion( this._quaternionStart );\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'world' ) {\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'scale' ) {\n\n\t\t\tif ( axis.search( 'XYZ' ) !== - 1 ) {\n\n\t\t\t\tlet d = this.pointEnd.length() / this.pointStart.length();\n\n\t\t\t\tif ( this.pointEnd.dot( this.pointStart ) < 0 ) d *= - 1;\n\n\t\t\t\t_tempVector2.set( d, d, d );\n\n\t\t\t} else {\n\n\t\t\t\t_tempVector.copy( this.pointStart );\n\t\t\t\t_tempVector2.copy( this.pointEnd );\n\n\t\t\t\t_tempVector.applyQuaternion( this._worldQuaternionInv );\n\t\t\t\t_tempVector2.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t\t_tempVector2.divide( _tempVector );\n\n\t\t\t\tif ( axis.search( 'X' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.x = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.y = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.z = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply scale\n\n\t\t\tobject.scale.copy( this._scaleStart ).multiply( _tempVector2 );\n\n\t\t\tif ( this.scaleSnap ) {\n\n\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.x = Math.round( object.scale.x / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.y = Math.round( object.scale.y / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.z = Math.round( object.scale.z / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'rotate' ) {\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tconst ROTATION_SPEED = 20 / this.worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );\n\n\t\t\tif ( axis === 'E' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this.eye );\n\t\t\t\tthis.rotationAngle = this.pointEnd.angleTo( this.pointStart );\n\n\t\t\t\tthis._startNorm.copy( this.pointStart ).normalize();\n\t\t\t\tthis._endNorm.copy( this.pointEnd ).normalize();\n\n\t\t\t\tthis.rotationAngle *= ( this._endNorm.cross( this._startNorm ).dot( this.eye ) < 0 ? 1 : - 1 );\n\n\t\t\t} else if ( axis === 'XYZE' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this._offset ).cross( this.eye ).normalize();\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.copy( this.rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;\n\n\t\t\t} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {\n\n\t\t\t\tthis.rotationAxis.copy( _unit[ axis ] );\n\n\t\t\t\t_tempVector.copy( _unit[ axis ] );\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.cross( this.eye ).normalize() ) * ROTATION_SPEED;\n\n\t\t\t}\n\n\t\t\t// Apply rotation snap\n\n\t\t\tif ( this.rotationSnap ) this.rotationAngle = Math.round( this.rotationAngle / this.rotationSnap ) * this.rotationSnap;\n\n\t\t\t// Apply rotate\n\t\t\tif ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {\n\n\t\t\t\tobject.quaternion.copy( this._quaternionStart );\n\t\t\t\tobject.quaternion.multiply( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\tthis.rotationAxis.applyQuaternion( this._parentQuaternionInv );\n\t\t\t\tobject.quaternion.copy( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) );\n\t\t\t\tobject.quaternion.multiply( this._quaternionStart ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( _changeEvent );\n\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t}\n\n\tpointerUp( pointer ) {\n\n\t\tif ( pointer.button !== 0 ) return;\n\n\t\tif ( this.dragging && ( this.axis !== null ) ) {\n\n\t\t\t_mouseUpEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseUpEvent );\n\n\t\t}\n\n\t\tthis.dragging = false;\n\t\tthis.axis = null;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\tthis.traverse( function ( child ) {\n\n\t\t\tif ( child.geometry ) child.geometry.dispose();\n\t\t\tif ( child.material ) child.material.dispose();\n\n\t\t} );\n\n\t}\n\n\t// Set current object\n\tattach( object ) {\n\n\t\tthis.object = object;\n\t\tthis.visible = true;\n\n\t\treturn this;\n\n\t}\n\n\t// Detach from object\n\tdetach() {\n\n\t\tthis.object = undefined;\n\t\tthis.visible = false;\n\t\tthis.axis = null;\n\n\t\treturn this;\n\n\t}\n\n\treset() {\n\n\t\tif ( ! this.enabled ) return;\n\n\t\tif ( this.dragging ) {\n\n\t\t\tthis.object.position.copy( this._positionStart );\n\t\t\tthis.object.quaternion.copy( this._quaternionStart );\n\t\t\tthis.object.scale.copy( this._scaleStart );\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t\t\tthis.pointStart.copy( this.pointEnd );\n\n\t\t}\n\n\t}\n\n\tgetRaycaster() {\n\n\t\treturn _raycaster;\n\n\t}\n\n\t// TODO: deprecate\n\n\tgetMode() {\n\n\t\treturn this.mode;\n\n\t}\n\n\tsetMode( mode ) {\n\n\t\tthis.mode = mode;\n\n\t}\n\n\tsetTranslationSnap( translationSnap ) {\n\n\t\tthis.translationSnap = translationSnap;\n\n\t}\n\n\tsetRotationSnap( rotationSnap ) {\n\n\t\tthis.rotationSnap = rotationSnap;\n\n\t}\n\n\tsetScaleSnap( scaleSnap ) {\n\n\t\tthis.scaleSnap = scaleSnap;\n\n\t}\n\n\tsetSize( size ) {\n\n\t\tthis.size = size;\n\n\t}\n\n\tsetSpace( space ) {\n\n\t\tthis.space = space;\n\n\t}\n\n}\n\n// mouse / touch event handlers\n\nfunction getPointer( event ) {\n\n\tif ( this.domElement.ownerDocument.pointerLockElement ) {\n\n\t\treturn {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tbutton: event.button\n\t\t};\n\n\t} else {\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\tx: ( event.clientX - rect.left ) / rect.width * 2 - 1,\n\t\t\ty: - ( event.clientY - rect.top ) / rect.height * 2 + 1,\n\t\t\tbutton: event.button\n\t\t};\n\n\t}\n\n}\n\nfunction onPointerHover( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tswitch ( event.pointerType ) {\n\n\t\tcase 'mouse':\n\t\tcase 'pen':\n\t\t\tthis.pointerHover( this._getPointer( event ) );\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tif ( ! document.pointerLockElement ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t}\n\n\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerHover( this._getPointer( event ) );\n\tthis.pointerDown( this._getPointer( event ) );\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.pointerMove( this._getPointer( event ) );\n\n}\n\nfunction onPointerUp( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerUp( this._getPointer( event ) );\n\n}\n\nfunction intersectObjectWithRay( object, raycaster, includeInvisible ) {\n\n\tconst allIntersections = raycaster.intersectObject( object, true );\n\n\tfor ( let i = 0; i < allIntersections.length; i ++ ) {\n\n\t\tif ( allIntersections[ i ].object.visible || includeInvisible ) {\n\n\t\t\treturn allIntersections[ i ];\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\n//\n\n// Reusable utility variables\n\nconst _tempEuler = new Euler();\nconst _alignVector = new Vector3( 0, 1, 0 );\nconst _zeroVector = new Vector3( 0, 0, 0 );\nconst _lookAtMatrix = new Matrix4();\nconst _tempQuaternion2 = new Quaternion();\nconst _identityQuaternion = new Quaternion();\nconst _dirVector = new Vector3();\nconst _tempMatrix = new Matrix4();\n\nconst _unitX = new Vector3( 1, 0, 0 );\nconst _unitY = new Vector3( 0, 1, 0 );\nconst _unitZ = new Vector3( 0, 0, 1 );\n\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\n\nclass TransformControlsGizmo extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isTransformControlsGizmo = true;\n\n\t\tthis.type = 'TransformControlsGizmo';\n\n\t\t// shared materials\n\n\t\tconst gizmoMaterial = new MeshBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tconst gizmoLineMaterial = new LineBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t// Make unique material for each axis/color\n\n\t\tconst matInvisible = gizmoMaterial.clone();\n\t\tmatInvisible.opacity = 0.15;\n\n\t\tconst matHelper = gizmoLineMaterial.clone();\n\t\tmatHelper.opacity = 0.5;\n\n\t\tconst matRed = gizmoMaterial.clone();\n\t\tmatRed.color.setHex( 0xff0000 );\n\n\t\tconst matGreen = gizmoMaterial.clone();\n\t\tmatGreen.color.setHex( 0x00ff00 );\n\n\t\tconst matBlue = gizmoMaterial.clone();\n\t\tmatBlue.color.setHex( 0x0000ff );\n\n\t\tconst matRedTransparent = gizmoMaterial.clone();\n\t\tmatRedTransparent.color.setHex( 0xff0000 );\n\t\tmatRedTransparent.opacity = 0.5;\n\n\t\tconst matGreenTransparent = gizmoMaterial.clone();\n\t\tmatGreenTransparent.color.setHex( 0x00ff00 );\n\t\tmatGreenTransparent.opacity = 0.5;\n\n\t\tconst matBlueTransparent = gizmoMaterial.clone();\n\t\tmatBlueTransparent.color.setHex( 0x0000ff );\n\t\tmatBlueTransparent.opacity = 0.5;\n\n\t\tconst matWhiteTransparent = gizmoMaterial.clone();\n\t\tmatWhiteTransparent.opacity = 0.25;\n\n\t\tconst matYellowTransparent = gizmoMaterial.clone();\n\t\tmatYellowTransparent.color.setHex( 0xffff00 );\n\t\tmatYellowTransparent.opacity = 0.25;\n\n\t\tconst matYellow = gizmoMaterial.clone();\n\t\tmatYellow.color.setHex( 0xffff00 );\n\n\t\tconst matGray = gizmoMaterial.clone();\n\t\tmatGray.color.setHex( 0x787878 );\n\n\t\t// reusable geometry\n\n\t\tconst arrowGeometry = new CylinderGeometry( 0, 0.04, 0.1, 12 );\n\t\tarrowGeometry.translate( 0, 0.05, 0 );\n\n\t\tconst scaleHandleGeometry = new BoxGeometry( 0.08, 0.08, 0.08 );\n\t\tscaleHandleGeometry.translate( 0, 0.04, 0 );\n\n\t\tconst lineGeometry = new BufferGeometry();\n\t\tlineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,\t1, 0, 0 ], 3 ) );\n\n\t\tconst lineGeometry2 = new CylinderGeometry( 0.0075, 0.0075, 0.5, 3 );\n\t\tlineGeometry2.translate( 0, 0.25, 0 );\n\n\t\tfunction CircleGeometry( radius, arc ) {\n\n\t\t\tconst geometry = new TorusGeometry( radius, 0.0075, 3, 64, arc * Math.PI * 2 );\n\t\t\tgeometry.rotateY( Math.PI / 2 );\n\t\t\tgeometry.rotateX( Math.PI / 2 );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n\t\tfunction TranslateHelperGeometry() {\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n\t\tconst gizmoTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, - 0.5, 0 ], [ Math.PI, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), null, [ Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent.clone() ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.2, 0 ), matInvisible ) ]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperTranslate = {\n\t\t\tSTART: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tEND: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tDELTA: [\n\t\t\t\t[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 1 ), matGray ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matRed ) ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matGreen ), null, [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matBlue ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.75, 1 ), matYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperRotate = {\n\t\t\tAXIS: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( new SphereGeometry( 0.25, 10, 8 ), matInvisible ) ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.75, 0.1, 2, 24 ), matInvisible ) ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, - 0.5, 0 ], [ 0, 0, Math.PI ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.1, 0.1, 0.1 ), matWhiteTransparent.clone() ) ],\n\t\t\t]\n\t\t};\n\n\t\tconst pickerScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]],\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 0 ]],\n\t\t\t]\n\t\t};\n\n\t\tconst helperScale = {\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\t// Creates an Object3D with gizmos described in custom hierarchy definition.\n\n\t\tfunction setupGizmo( gizmoMap ) {\n\n\t\t\tconst gizmo = new Object3D();\n\n\t\t\tfor ( const name in gizmoMap ) {\n\n\t\t\t\tfor ( let i = gizmoMap[ name ].length; i --; ) {\n\n\t\t\t\t\tconst object = gizmoMap[ name ][ i ][ 0 ].clone();\n\t\t\t\t\tconst position = gizmoMap[ name ][ i ][ 1 ];\n\t\t\t\t\tconst rotation = gizmoMap[ name ][ i ][ 2 ];\n\t\t\t\t\tconst scale = gizmoMap[ name ][ i ][ 3 ];\n\t\t\t\t\tconst tag = gizmoMap[ name ][ i ][ 4 ];\n\n\t\t\t\t\t// name and tag properties are essential for picking and updating logic.\n\t\t\t\t\tobject.name = name;\n\t\t\t\t\tobject.tag = tag;\n\n\t\t\t\t\tif ( position ) {\n\n\t\t\t\t\t\tobject.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( rotation ) {\n\n\t\t\t\t\t\tobject.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scale ) {\n\n\t\t\t\t\t\tobject.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t\tconst tempGeometry = object.geometry.clone();\n\t\t\t\t\ttempGeometry.applyMatrix4( object.matrix );\n\t\t\t\t\tobject.geometry = tempGeometry;\n\t\t\t\t\tobject.renderOrder = Infinity;\n\n\t\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t\t\tobject.rotation.set( 0, 0, 0 );\n\t\t\t\t\tobject.scale.set( 1, 1, 1 );\n\n\t\t\t\t\tgizmo.add( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn gizmo;\n\n\t\t}\n\n\t\t// Gizmo creation\n\n\t\tthis.gizmo = {};\n\t\tthis.picker = {};\n\t\tthis.helper = {};\n\n\t\tthis.add( this.gizmo[ 'translate' ] = setupGizmo( gizmoTranslate ) );\n\t\tthis.add( this.gizmo[ 'rotate' ] = setupGizmo( gizmoRotate ) );\n\t\tthis.add( this.gizmo[ 'scale' ] = setupGizmo( gizmoScale ) );\n\t\tthis.add( this.picker[ 'translate' ] = setupGizmo( pickerTranslate ) );\n\t\tthis.add( this.picker[ 'rotate' ] = setupGizmo( pickerRotate ) );\n\t\tthis.add( this.picker[ 'scale' ] = setupGizmo( pickerScale ) );\n\t\tthis.add( this.helper[ 'translate' ] = setupGizmo( helperTranslate ) );\n\t\tthis.add( this.helper[ 'rotate' ] = setupGizmo( helperRotate ) );\n\t\tthis.add( this.helper[ 'scale' ] = setupGizmo( helperScale ) );\n\n\t\t// Pickers should be hidden always\n\n\t\tthis.picker[ 'translate' ].visible = false;\n\t\tthis.picker[ 'rotate' ].visible = false;\n\t\tthis.picker[ 'scale' ].visible = false;\n\n\t}\n\n\t// updateMatrixWorld will update transformations and appearance of individual handles\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst space = ( this.mode === 'scale' ) ? 'local' : this.space; // scale always oriented to local rotation\n\n\t\tconst quaternion = ( space === 'local' ) ? this.worldQuaternion : _identityQuaternion;\n\n\t\t// Show only gizmos for current transform mode\n\n\t\tthis.gizmo[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.gizmo[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.gizmo[ 'scale' ].visible = this.mode === 'scale';\n\n\t\tthis.helper[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.helper[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.helper[ 'scale' ].visible = this.mode === 'scale';\n\n\n\t\tlet handles = [];\n\t\thandles = handles.concat( this.picker[ this.mode ].children );\n\t\thandles = handles.concat( this.gizmo[ this.mode ].children );\n\t\thandles = handles.concat( this.helper[ this.mode ].children );\n\n\t\tfor ( let i = 0; i < handles.length; i ++ ) {\n\n\t\t\tconst handle = handles[ i ];\n\n\t\t\t// hide aligned to camera\n\n\t\t\thandle.visible = true;\n\t\t\thandle.rotation.set( 0, 0, 0 );\n\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\tlet factor;\n\n\t\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\t\tfactor = ( this.camera.top - this.camera.bottom ) / this.camera.zoom;\n\n\t\t\t} else {\n\n\t\t\t\tfactor = this.worldPosition.distanceTo( this.cameraPosition ) * Math.min( 1.9 * Math.tan( Math.PI * this.camera.fov / 360 ) / this.camera.zoom, 7 );\n\n\t\t\t}\n\n\t\t\thandle.scale.set( 1, 1, 1 ).multiplyScalar( factor * this.size / 4 );\n\n\t\t\t// TODO: simplify helpers and consider decoupling from gizmo\n\n\t\t\tif ( handle.tag === 'helper' ) {\n\n\t\t\t\thandle.visible = false;\n\n\t\t\t\tif ( handle.name === 'AXIS' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = !! this.axis;\n\n\t\t\t\t\tif ( this.axis === 'X' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Y' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, Math.PI / 2 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Z' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'XYZE' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\t_alignVector.copy( this.rotationAxis );\n\t\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( _zeroVector, _alignVector, _unitY ) );\n\t\t\t\t\t\thandle.quaternion.multiply( _tempQuaternion );\n\t\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'E' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if ( handle.name === 'START' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'END' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPosition );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'DELTA' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.quaternion.copy( this.worldQuaternionStart );\n\t\t\t\t\t_tempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternionStart.clone().invert() );\n\t\t\t\t\thandle.scale.copy( _tempVector );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\t\t\tif ( this.dragging ) {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis ) {\n\n\t\t\t\t\t\thandle.visible = this.axis.search( handle.name ) !== - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If updating helper, skip rest of the loop\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Align handles to current local or world rotation\n\n\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\tif ( this.mode === 'translate' || this.mode === 'scale' ) {\n\n\t\t\t\t// Hide translate and scale axis facing the camera\n\n\t\t\t\tconst AXIS_HIDE_THRESHOLD = 0.99;\n\t\t\t\tconst PLANE_HIDE_THRESHOLD = 0.2;\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XY' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'YZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.mode === 'rotate' ) {\n\n\t\t\t\t// Align handles to current local or world rotation\n\n\t\t\t\t_tempQuaternion2.copy( quaternion );\n\t\t\t\t_alignVector.copy( this.eye ).applyQuaternion( _tempQuaternion.copy( quaternion ).invert() );\n\n\t\t\t\tif ( handle.name.search( 'E' ) !== - 1 ) {\n\n\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( this.eye, _zeroVector, _unitY ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitX, Math.atan2( - _alignVector.y, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitY, Math.atan2( _alignVector.x, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitZ, Math.atan2( _alignVector.y, _alignVector.x ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Hide disabled axes\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'X' ) === - 1 || this.showX );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Y' ) === - 1 || this.showY );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Z' ) === - 1 || this.showZ );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'E' ) === - 1 || ( this.showX && this.showY && this.showZ ) );\n\n\t\t\t// highlight selected axis\n\n\t\t\thandle.material._color = handle.material._color || handle.material.color.clone();\n\t\t\thandle.material._opacity = handle.material._opacity || handle.material.opacity;\n\n\t\t\thandle.material.color.copy( handle.material._color );\n\t\t\thandle.material.opacity = handle.material._opacity;\n\n\t\t\tif ( this.enabled && this.axis ) {\n\n\t\t\t\tif ( handle.name === this.axis ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t} else if ( this.axis.split( '' ).some( function ( a ) {\n\n\t\t\t\t\treturn handle.name === a;\n\n\t\t\t\t} ) ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\n//\n\nclass TransformControlsPlane extends Mesh {\n\n\tconstructor() {\n\n\t\tsuper(\n\t\t\tnew PlaneGeometry( 100000, 100000, 2, 2 ),\n\t\t\tnew MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false } )\n\t\t);\n\n\t\tthis.isTransformControlsPlane = true;\n\n\t\tthis.type = 'TransformControlsPlane';\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet space = this.space;\n\n\t\tthis.position.copy( this.worldPosition );\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\t_v1.copy( _unitX ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v2.copy( _unitY ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v3.copy( _unitZ ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\n\t\t// Align the plane for current transform mode, axis and space.\n\n\t\t_alignVector.copy( _v2 );\n\n\t\tswitch ( this.mode ) {\n\n\t\t\tcase 'translate':\n\t\t\tcase 'scale':\n\t\t\t\tswitch ( this.axis ) {\n\n\t\t\t\t\tcase 'X':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v1 );\n\t\t\t\t\t\t_dirVector.copy( _v1 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v2 );\n\t\t\t\t\t\t_dirVector.copy( _v2 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v3 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XY':\n\t\t\t\t\t\t_dirVector.copy( _v3 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YZ':\n\t\t\t\t\t\t_dirVector.copy( _v1 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XZ':\n\t\t\t\t\t\t_alignVector.copy( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v2 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XYZ':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\t_dirVector.set( 0, 0, 0 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\tdefault:\n\t\t\t\t// special case for rotate\n\t\t\t\t_dirVector.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( _dirVector.length() === 0 ) {\n\n\t\t\t// If in rotate mode, make the plane parallel to camera\n\t\t\tthis.quaternion.copy( this.cameraQuaternion );\n\n\t\t} else {\n\n\t\t\t_tempMatrix.lookAt( _tempVector.set( 0, 0, 0 ), _dirVector, _alignVector );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _tempMatrix );\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };\n"],
  "mappings": "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",
  "names": []
}
